{"version":3,"sources":["components/TaskPreview/TaskPreview.tsx","services/TaskService.ts","components/TaskList/TaskList.tsx","components/TaskEdit/TaskEdit.tsx","components/AddTask/AddTask.tsx","App.tsx","index.tsx"],"names":["TaskPreview","task","toggleTask","deleteTask","updateTask","className","is_finished","undefined","title","created_at","type","checked","onChange","to","id","onClick","axios","Axios","create","withCredentials","fetchTasks","a","get","res","data","deleteTaskById","q","delete","createTask","newTask","method","url","updatedTask","TaskList","tasks","map","key","TaskEdit","state","newTitle","handleChange","e","setState","target","value","updateTaskTitle","props","this","getTask","Component","AddTask","addTask","useState","setNewTask","formatNewTask","user_id","Date","now","name","preventDefault","trim","taskToAdd","App","selectedTask","tasksToRender","forEach","push","status","alert","idx","findIndex","Number","length","toDateString","exact","path","component","render","match","params","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.16558413.chunk.js","sourcesContent":["import React from 'react'\r\nimport './TaskPreview.css'\r\nimport { Link } from 'react-router-dom';\r\n\r\ninterface PreviewProps {\r\n   task: Task,\r\n   toggleTask: toggleTask,\r\n   deleteTask: deleteTask,\r\n   updateTask: updateTask\r\n}\r\n\r\nexport const TaskPreview: React.FC<PreviewProps> = ({task, toggleTask, deleteTask, updateTask}) => { \r\n    return (\r\n        task && <tr>\r\n            <td className={task.is_finished ? \"complete\" : undefined}>{task.title}</td>\r\n            <td>{task.created_at}</td>\r\n            <td> \r\n                <label>\r\n                <input type=\"checkbox\" checked={task.is_finished} onChange={() => toggleTask(task)}/> \r\n                </label>\r\n            </td>\r\n            <td>\r\n                <button className=\"action-edit btn\"><Link className=\"edit-link\" to={`/${task.id}`}>Edit</Link></button>\r\n                <button onClick={() => deleteTask(task)} className=\"action-delete btn\">Delete</button>\r\n            </td>\r\n        </tr>\r\n    )\r\n}\r\n\r\n","import Axios from 'axios'\r\n\r\nconst BASE_URL = process.env.NODE_ENV === \"production\" ? \"/\" : \"//localhost:8080/\"\r\n\r\nvar axios = Axios.create({\r\n    withCredentials: true\r\n})\r\n\r\n\r\nexport async function fetchTasks(): Promise<any> {\r\n    const res = await axios.get(`${BASE_URL}task`);\r\n\r\n    if( res.data ) return res.data\r\n    else {\r\n        return \"Couldnt get tasks\"\r\n    }\r\n}\r\n\r\nexport async function fetchTaskById(id: string): Promise<any> {\r\n    const res = await axios.get(`${BASE_URL}task/`+ id )\r\n    return res.data\r\n}\r\n\r\nexport async function deleteTaskById(id: number): Promise<any> {\r\n    \r\n    let q = `?q=${id}`\r\n    const res = await axios.delete(`${BASE_URL}task`+ q)\r\n    \r\n    return res\r\n}\r\n\r\nexport async function createTask(newTask: Object): Promise<any> {\r\n    const res = axios({\r\n        method: 'post',\r\n        url:`${BASE_URL}task`,\r\n        data: {task:newTask}\r\n    })\r\n    return res\r\n}\r\n\r\nexport async function updateTask(updatedTask: Task): Promise<any> {\r\n    const res = axios({\r\n        method: 'put',\r\n        url:`${BASE_URL}task`,\r\n        data: {task: updatedTask}\r\n    })\r\n    return res\r\n}\r\n","import React from 'react'\r\nimport { TaskPreview } from '../TaskPreview/TaskPreview'\r\nimport './TaskList.css'\r\nimport { updateTask } from '../../services/TaskService'\r\n\r\ninterface TaskProps {\r\n    tasks: Array<Task>,\r\n    toggleTask: toggleTask,\r\n    deleteTask: deleteTask,\r\n    updateTask: updateTask\r\n}\r\n\r\nexport const TaskList: React.FC<TaskProps> = ({tasks, toggleTask, deleteTask}) => {\r\n\r\n    return (\r\n        <div className=\"list-container\">\r\n            <h1>Propit Todo App</h1>\r\n\r\n            <table className = \"table-container\">\r\n               <thead>\r\n                   <tr>\r\n                        <th>title</th>\r\n                        <th>created at</th>\r\n                        <th>status</th>\r\n                        <th>actions</th>\r\n                   </tr>\r\n               </thead>\r\n               <tbody>\r\n                    {\r\n                        (tasks) ? \r\n                        tasks.map(task => <TaskPreview key={task.id} task={task} updateTask={updateTask} toggleTask={toggleTask} deleteTask={deleteTask}></TaskPreview>) :\r\n                        <h1>No tasks to display</h1>\r\n                    }\r\n               </tbody>\r\n            </table>\r\n\r\n        </div>\r\n    )\r\n}","import React, { Component, ChangeEvent } from 'react'\r\nimport './TaskEdit.css'\r\nimport { Link } from 'react-router-dom';\r\n\r\ninterface EditProps {\r\n    id: number,\r\n    getTask: getTask,\r\n    updateTask: updateTask,\r\n}\r\n\r\nexport default class TaskEdit extends Component<EditProps> {\r\n    state: any = {\r\n        task: null,\r\n        newTitle: ''\r\n    }\r\n    componentWillMount() {\r\n       let res = this.props.getTask(this.props.id)\r\n       if (res.title) {\r\n           this.setState({task: res})\r\n           this.setState({newTitle: res.title})\r\n       }\r\n       else {\r\n           this.setState({task: \"no task  to edit\"})\r\n        }\r\n    }\r\n    handleChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({newTitle: e.target.value})\r\n    }\r\n    updateTaskTitle = async () => {\r\n        let newTask = this.state.task\r\n        newTask.title = this.state.newTitle\r\n        await this.props.updateTask(newTask)\r\n    }\r\n    render() {\r\n        const {newTitle} = this.state\r\n        return (\r\n            newTitle && <section className=\"task-edit-container\">\r\n                <h1>Propit Todo App</h1>\r\n\r\n                <h2>Edit the title of your task and Update</h2>\r\n                <input type=\"text\" value={newTitle} onChange={this.handleChange} />\r\n                <Link to={\"/\"}><button onClick={this.updateTaskTitle} className=\"action-delete btn\">Update</button></Link>\r\n                \r\n            </section>\r\n        )\r\n    }\r\n}","import React, {useState, ChangeEvent, FormEvent} from 'react'\r\nimport './AddTask.css'\r\n\r\ninterface AddTaskProps {\r\n    addTask: addTask,\r\n}\r\n\r\nexport const AddTask: React.FC<AddTaskProps> = ({addTask}) => {\r\n    const [newTask, setNewTask] = useState(\"\")\r\n\r\n    const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewTask(e.target.value)\r\n    }\r\n\r\n    const handleSubmit = (e: FormEvent<HTMLButtonElement>) => {\r\n        e.preventDefault()\r\n        if (newTask.trim() !== '') {\r\n            let taskToAdd = formatNewTask()\r\n            addTask(taskToAdd)\r\n            setNewTask('')\r\n        }\r\n    }\r\n\r\n    \r\n    const formatNewTask = () => {\r\n        return {\r\n          id: null,\r\n          user_id: null,\r\n          title: newTask,\r\n          created_at: Date.now(),\r\n          is_finished: false,\r\n          name: ''\r\n        }\r\n      }\r\n\r\n    return (\r\n        <form className='add-task-container'>\r\n            <input className=\"add-input\" type=\"text\" value={newTask} onChange={handleChange}/>\r\n            <button className=\"add-btn\" type=\"submit\" onClick={handleSubmit}>Submit new task</button>\r\n        </form>\r\n    )\r\n}","import React, { Component }from 'react';\nimport './App.css';\nimport { HashRouter, Switch, Route } from 'react-router-dom'\nimport { TaskList } from \"./components/TaskList/TaskList\"\nimport  TaskEdit  from \"./components/TaskEdit/TaskEdit\"\nimport { AddTask } from \"./components/AddTask/AddTask\"\nimport { fetchTasks, deleteTaskById, createTask, updateTask } from \"./services/TaskService\"\n\nexport default class App extends Component {\n    state = {\n      tasks: []\n    }\n  \n    async componentWillMount() { // getting all tasks\n      let res = await fetchTasks()\n      res.forEach((task: Task) => {\n        task.created_at = new Date(task.created_at).toDateString()\n        if (task.is_finished) task.is_finished = true\n        else task.is_finished = false\n      })\n      \n      this.setState({ tasks: res})\n    }\n  \n    toggleTask: toggleTask = async (selectedTask) => { // Changing task status\n      selectedTask.is_finished = !selectedTask.is_finished\n\n      this.updateTask(selectedTask)\n    }\n  \n    deleteTask: deleteTask = async (selectedTask) => { // Deleting a task\n      let tasksToRender:Array<Task> = []\n      this.state.tasks.forEach( ( task:Task) => {\n        if (task.id !== selectedTask.id) {\n          tasksToRender.push(task)\n        }\n      })\n      this.setState({ tasks: tasksToRender })\n      let res = await deleteTaskById(selectedTask.id)\n      if (res.status !== 200) alert(\"Error: task wasnt deleted from DB\")\n    }\n\n    updateTask: updateTask = async (selectedTask) => { // Updating a task\n        let tasksToRender:Array<Task> = this.state.tasks\n        let idx = this.state.tasks.findIndex((task:Task) => {\n          return (task.id === selectedTask.id)\n        })\n        if (idx >= 0) {\n          tasksToRender[idx] = selectedTask\n          this.setState({tasks: tasksToRender})\n        }\n      \n      let res = await updateTask(selectedTask)\n      if (res.status !== 200) alert(\"Error: task didint update to DB\")\n\n    }\n\n    getTask: getTask = (id) => {\n      let idx = this.state.tasks.findIndex( (task: Task) => {\n        return (Number(task.id) === Number(id))\n      })\n      \n      if (idx >= 0) return this.state.tasks[idx]\n    }\n  \n    addTask: addTask = async (newTask: Object) => { // Adding a task\n      let res = await createTask(newTask)\n      if (res.status !== 200) alert(\"Error: task didint add to DB\")\n      let tasksToRender:Array<any> = this.state.tasks\n      tasksToRender.push(newTask)\n      let length = tasksToRender.length - 1\n      tasksToRender[length].created_at = new Date(tasksToRender[length].created_at).toDateString()\n      this.setState({tasks: tasksToRender})\n    }\n    \n\n\n    \n\n  render() {\n    const tasks = this.state.tasks\n    return (\n      <div className=\"tasks-app\">\n          <HashRouter>\n            <Switch>\n              <Route exact path=\"/\" component={() => <TaskList tasks={tasks} updateTask={this.updateTask} toggleTask={this.toggleTask} deleteTask={this.deleteTask}/>}></Route>\n              <Route path=\"/:id\" render={({match}) => (\n                <TaskEdit updateTask={this.updateTask} getTask={this.getTask} id={match.params.id}></TaskEdit>\n                )}></Route>\n            </Switch>\n            <Route exact path=\"/\"><AddTask addTask={this.addTask}></AddTask></Route>\n          </HashRouter>\n          \n      </div>\n    );\n  }\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}